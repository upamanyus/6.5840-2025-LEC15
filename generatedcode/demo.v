(* autogenerated from demo *)
From New.golang Require Import defn.
Require Export New.code.sync.

Definition demo : go_string := "demo".

Module demo.
Section code.
Context `{ffi_syntax}.


(* go: ex1.go:3:6 *)
Definition foo : val :=
  rec: "foo" <> :=
    exception_do (let: "x" := (ref_ty intT (zero_val intT)) in
    let: "$r0" := #(W64 10) in
    do:  ("x" <-[intT] "$r0");;;
    do:  ("x" <-[intT] ((![intT] "x") - #(W64 3)));;;
    (if: int_gt (![intT] "x") #(W64 0)
    then return: (![intT] "x")
    else do:  #());;;
    do:  (let: "$a0" := (interface.make #""%go #"string"%go #"unreachable"%go) in
    Panic "$a0")).

(* go: ex2.go:3:6 *)
Definition concurrentExample : val :=
  rec: "concurrentExample" <> :=
    exception_do (let: "x" := (ref_ty intT (zero_val intT)) in
    let: "$r0" := #(W64 0) in
    do:  ("x" <-[intT] "$r0");;;
    let: "y" := (ref_ty intT (zero_val intT)) in
    let: "$r0" := #(W64 0) in
    do:  ("y" <-[intT] "$r0");;;
    let: "$go" := (λ: <>,
      exception_do (do:  ("x" <-[intT] ((![intT] "x") + #(W64 1))))
      ) in
    do:  (Fork ("$go" #()));;;
    let: "$go" := (λ: <>,
      exception_do (let: "$r0" := #(W64 32) in
      do:  ("y" <-[intT] "$r0");;;
      (if: (![intT] "y") = #(W64 0)
      then
        do:  (let: "$a0" := (interface.make #""%go #"string"%go #"impossible"%go) in
        Panic "$a0")
      else do:  #());;;
      let: "$r0" := ((func_call #demo.demo #"foo"%go) #()) in
      do:  ("y" <-[intT] "$r0"))
      ) in
    do:  (Fork ("$go" #()))).

Definition Raft : go_type := structT [
  "mu" :: sync.Mutex;
  "currentTerm" :: intT
].

(* go: ex3.go:10:17 *)
Definition Raft__AppendEntries : val :=
  rec: "Raft__AppendEntries" "rf" "newTerm" :=
    exception_do (let: "rf" := (ref_ty ptrT "rf") in
    let: "newTerm" := (ref_ty intT "newTerm") in
    do:  ((method_call #sync #"Mutex'ptr" #"Lock" (struct.field_ref Raft "mu" (![ptrT] "rf"))) #());;;
    (if: int_gt (![intT] "newTerm") (![intT] (struct.field_ref Raft "currentTerm" (![ptrT] "rf")))
    then
      let: "$r0" := (![intT] "newTerm") in
      do:  ((struct.field_ref Raft "currentTerm" (![ptrT] "rf")) <-[intT] "$r0")
    else do:  #());;;
    do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (struct.field_ref Raft "mu" (![ptrT] "rf"))) #())).

(* go: ex3.go:23:17 *)
Definition Raft__test : val :=
  rec: "Raft__test" "rf" <> :=
    exception_do (let: "rf" := (ref_ty ptrT "rf") in
    let: "$go" := (λ: <>,
      exception_do (do:  (let: "$a0" := #(W64 10) in
      (method_call #demo.demo #"Raft'ptr" #"AppendEntries" (![ptrT] "rf")) "$a0"))
      ) in
    do:  (Fork ("$go" #()));;;
    let: "$go" := (λ: <>,
      exception_do (do:  (let: "$a0" := #(W64 37) in
      (method_call #demo.demo #"Raft'ptr" #"AppendEntries" (![ptrT] "rf")) "$a0"))
      ) in
    do:  (Fork ("$go" #()))).

(* go: ex3.go:33:17 *)
Definition Raft__Bad : val :=
  rec: "Raft__Bad" "rf" "newTerm" :=
    exception_do (let: "rf" := (ref_ty ptrT "rf") in
    let: "newTerm" := (ref_ty intT "newTerm") in
    (if: int_gt (![intT] "newTerm") (![intT] (struct.field_ref Raft "currentTerm" (![ptrT] "rf")))
    then
      do:  ((method_call #sync #"Mutex'ptr" #"Lock" (struct.field_ref Raft "mu" (![ptrT] "rf"))) #());;;
      let: "$r0" := (![intT] "newTerm") in
      do:  ((struct.field_ref Raft "currentTerm" (![ptrT] "rf")) <-[intT] "$r0");;;
      do:  ((method_call #sync #"Mutex'ptr" #"Unlock" (struct.field_ref Raft "mu" (![ptrT] "rf"))) #())
    else do:  #())).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("foo"%go, foo); ("concurrentExample"%go, concurrentExample)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Raft"%go, []); ("Raft'ptr"%go, [("AppendEntries"%go, Raft__AppendEntries); ("Bad"%go, Raft__Bad); ("test"%go, Raft__test)])].

#[global] Instance info' : PkgInfo demo.demo :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [sync];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init demo.demo (λ: <>,
      exception_do (do:  sync.initialize')
      ).

End code.
End demo.
