(* autogenerated from demo *)
From New.golang Require Import defn.

Definition demo : go_string := "demo".

Module demo.
Section code.
Context `{ffi_syntax}.


(* go: ex1.go:3:6 *)
Definition foo : val :=
  rec: "foo" <> :=
    exception_do (let: "x" := (ref_ty intT (zero_val intT)) in
    let: "$r0" := #(W64 10) in
    do:  ("x" <-[intT] "$r0");;;
    do:  ("x" <-[intT] ((![intT] "x") - #(W64 3)));;;
    (if: int_gt (![intT] "x") #(W64 0)
    then return: (![intT] "x")
    else do:  #());;;
    do:  (let: "$a0" := (interface.make #""%go #"string"%go #"unrechable"%go) in
    Panic "$a0")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("foo"%go, foo)].

Definition msets' : list (go_string * (list (go_string * val))) := [].

#[global] Instance info' : PkgInfo demo.demo :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init demo.demo (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End demo.
