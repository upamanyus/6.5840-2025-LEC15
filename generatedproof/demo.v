(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.golang.theory.

Require Export New.code.demo.
Module demo.
Axiom falso : False.
Module Raft.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : sync.Mutex.t;
  currentTerm' : w64;
}.
End def.
End Raft.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Raft `{ffi_syntax}: Settable _ :=
  settable! Raft.mk < Raft.mu'; Raft.currentTerm' >.
Global Instance into_val_Raft `{ffi_syntax} : IntoVal Raft.t.
Admitted.

Global Instance into_val_typed_Raft `{ffi_syntax} : IntoValTyped Raft.t demo.Raft :=
{|
  default_val := Raft.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Raft_mu `{ffi_syntax} : IntoValStructField "mu" demo.Raft Raft.mu'.
Admitted.

Global Instance into_val_struct_field_Raft_currentTerm `{ffi_syntax} : IntoValStructField "currentTerm" demo.Raft Raft.currentTerm'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Raft `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' currentTerm':
  PureWp True
    (struct.make demo.Raft (alist_val [
      "mu" ::= #mu';
      "currentTerm" ::= #currentTerm'
    ]))%struct
    #(Raft.mk mu' currentTerm').
Admitted.


Global Instance Raft_struct_fields_split dq l (v : Raft.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[demo.Raft :: "mu"]{dq} v.(Raft.mu') ∗
    "HcurrentTerm" ∷ l ↦s[demo.Raft :: "currentTerm"]{dq} v.(Raft.currentTerm')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined demo :=
{|
  is_pkg_defined := is_global_definitions demo var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_foo :
  WpFuncCall demo "foo" _ (is_pkg_defined demo) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_concurrentExample :
  WpFuncCall demo "concurrentExample" _ (is_pkg_defined demo) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Raft'ptr_AppendEntries :
  WpMethodCall demo "Raft'ptr" "AppendEntries" _ (is_pkg_defined demo) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Raft'ptr_Bad :
  WpMethodCall demo "Raft'ptr" "Bad" _ (is_pkg_defined demo) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Raft'ptr_test :
  WpMethodCall demo "Raft'ptr" "test" _ (is_pkg_defined demo) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End demo.
